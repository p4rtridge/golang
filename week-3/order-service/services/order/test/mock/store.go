// Code generated by MockGen. DO NOT EDIT.
// Source: repository/postgres/store.go
//
// Generated by this command:
//
//	mockgen -source repository/postgres/store.go -destination test/mock/store.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	entity "order_service/services/order/entity"
	entity0 "order_service/services/product/entity"
	entity1 "order_service/services/user/entity"
	reflect "reflect"
	time "time"

	gomock "go.uber.org/mock/gomock"
)

// MockOrderRepository is a mock of OrderRepository interface.
type MockOrderRepository struct {
	ctrl     *gomock.Controller
	recorder *MockOrderRepositoryMockRecorder
}

// MockOrderRepositoryMockRecorder is the mock recorder for MockOrderRepository.
type MockOrderRepositoryMockRecorder struct {
	mock *MockOrderRepository
}

// NewMockOrderRepository creates a new mock instance.
func NewMockOrderRepository(ctrl *gomock.Controller) *MockOrderRepository {
	mock := &MockOrderRepository{ctrl: ctrl}
	mock.recorder = &MockOrderRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrderRepository) EXPECT() *MockOrderRepositoryMockRecorder {
	return m.recorder
}

// CreateOrder mocks base method.
func (m *MockOrderRepository) CreateOrder(ctx context.Context, order *entity.Order, callbackFn func(*entity.Order, *entity1.User, *[]entity0.Product) (bool, error)) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrder", ctx, order, callbackFn)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrder indicates an expected call of CreateOrder.
func (mr *MockOrderRepositoryMockRecorder) CreateOrder(ctx, order, callbackFn any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrder", reflect.TypeOf((*MockOrderRepository)(nil).CreateOrder), ctx, order, callbackFn)
}

// GetNumOfOrdersPerMonth mocks base method.
func (m *MockOrderRepository) GetNumOfOrdersPerMonth(ctx context.Context, userId int) (*[]entity.AggregatedOrdersByMonth, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumOfOrdersPerMonth", ctx, userId)
	ret0, _ := ret[0].(*[]entity.AggregatedOrdersByMonth)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumOfOrdersPerMonth indicates an expected call of GetNumOfOrdersPerMonth.
func (mr *MockOrderRepositoryMockRecorder) GetNumOfOrdersPerMonth(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumOfOrdersPerMonth", reflect.TypeOf((*MockOrderRepository)(nil).GetNumOfOrdersPerMonth), ctx, userId)
}

// GetOrder mocks base method.
func (m *MockOrderRepository) GetOrder(ctx context.Context, userId, orderId int) (*entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrder", ctx, userId, orderId)
	ret0, _ := ret[0].(*entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrder indicates an expected call of GetOrder.
func (mr *MockOrderRepositoryMockRecorder) GetOrder(ctx, userId, orderId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrder", reflect.TypeOf((*MockOrderRepository)(nil).GetOrder), ctx, userId, orderId)
}

// GetOrders mocks base method.
func (m *MockOrderRepository) GetOrders(ctx context.Context, userId int) (*[]entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrders", ctx, userId)
	ret0, _ := ret[0].(*[]entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrders indicates an expected call of GetOrders.
func (mr *MockOrderRepositoryMockRecorder) GetOrders(ctx, userId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrders", reflect.TypeOf((*MockOrderRepository)(nil).GetOrders), ctx, userId)
}

// GetOrdersSummarize mocks base method.
func (m *MockOrderRepository) GetOrdersSummarize(ctx context.Context, startDate, endDate time.Time) (*[]entity.OrdersSummarize, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrdersSummarize", ctx, startDate, endDate)
	ret0, _ := ret[0].(*[]entity.OrdersSummarize)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrdersSummarize indicates an expected call of GetOrdersSummarize.
func (mr *MockOrderRepositoryMockRecorder) GetOrdersSummarize(ctx, startDate, endDate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrdersSummarize", reflect.TypeOf((*MockOrderRepository)(nil).GetOrdersSummarize), ctx, startDate, endDate)
}

// GetTopFiveOrdersByPrice mocks base method.
func (m *MockOrderRepository) GetTopFiveOrdersByPrice(ctx context.Context) (*[]entity.Order, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTopFiveOrdersByPrice", ctx)
	ret0, _ := ret[0].(*[]entity.Order)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTopFiveOrdersByPrice indicates an expected call of GetTopFiveOrdersByPrice.
func (mr *MockOrderRepositoryMockRecorder) GetTopFiveOrdersByPrice(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTopFiveOrdersByPrice", reflect.TypeOf((*MockOrderRepository)(nil).GetTopFiveOrdersByPrice), ctx)
}
