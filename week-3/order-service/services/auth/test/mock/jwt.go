// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/jwt.go
//
// Generated by this command:
//
//	mockgen -source pkg/jwt.go -destination services/auth/test/mock/jwt.go -package mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	jwt "github.com/golang-jwt/jwt/v5"
	gomock "go.uber.org/mock/gomock"
)

// MockJWT is a mock of JWT interface.
type MockJWT struct {
	ctrl     *gomock.Controller
	recorder *MockJWTMockRecorder
}

// MockJWTMockRecorder is the mock recorder for MockJWT.
type MockJWTMockRecorder struct {
	mock *MockJWT
}

// NewMockJWT creates a new mock instance.
func NewMockJWT(ctrl *gomock.Controller) *MockJWT {
	mock := &MockJWT{ctrl: ctrl}
	mock.recorder = &MockJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWT) EXPECT() *MockJWTMockRecorder {
	return m.recorder
}

// IssueAccessToken mocks base method.
func (m *MockJWT) IssueAccessToken(ctx context.Context, id, sub string) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueAccessToken", ctx, id, sub)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IssueAccessToken indicates an expected call of IssueAccessToken.
func (mr *MockJWTMockRecorder) IssueAccessToken(ctx, id, sub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueAccessToken", reflect.TypeOf((*MockJWT)(nil).IssueAccessToken), ctx, id, sub)
}

// IssueRefreshToken mocks base method.
func (m *MockJWT) IssueRefreshToken(ctx context.Context, id, sub string) (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IssueRefreshToken", ctx, id, sub)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// IssueRefreshToken indicates an expected call of IssueRefreshToken.
func (mr *MockJWTMockRecorder) IssueRefreshToken(ctx, id, sub any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IssueRefreshToken", reflect.TypeOf((*MockJWT)(nil).IssueRefreshToken), ctx, id, sub)
}

// ParseToken mocks base method.
func (m *MockJWT) ParseToken(ctx context.Context, tokenStr string) (*jwt.RegisteredClaims, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", ctx, tokenStr)
	ret0, _ := ret[0].(*jwt.RegisteredClaims)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockJWTMockRecorder) ParseToken(ctx, tokenStr any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockJWT)(nil).ParseToken), ctx, tokenStr)
}
